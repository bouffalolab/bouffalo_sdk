name: build all

on:
  push:
    branches: [ "master" ]
    paths: 
    - '.github/workflows/build_all.yml'
  pull_request:
    branches: [ "master" ]
    paths: 
    - '.github/workflows/build_all.yml'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Cache toolchain
      id: cache
      uses: actions/cache@v1
      with: 
        path: /opt/riscv64-unknown-elf
        key : ${{runner.OS}}-riscv64-unknown-elf-caches-v1-${{ hashFiles('bin/riscv64-unknown-elf-gcc') }}

    - name: Download toolchain
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        git clone https://gitee.com/bouffalolab/toolchain_gcc_t-head_linux.git
        mv -f toolchain_gcc_t-head_linux /opt/riscv64-unknown-elf

    #- name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build all case
      # Build your program with the given configuration
      run: |
        PATH="$PATH:/opt/riscv64-unknown-elf/bin"
        cd examples
        make buildall CHIP=bl616 BOARD=bl616dk CPU_ID=
        make cleanall
        make buildall CHIP=bl602 BOARD=bl602dk CPU_ID=
        make cleanall
        make buildall CHIP=bl702 BOARD=bl702dk CPU_ID=
        make cleanall
        make buildall CHIP=bl808 BOARD=bl808dk CPU_ID=m0
        make cleanall
        

    #- name: Test
      #working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{env.BUILD_TYPE}}

