[LOAD_CFG]
#jlink or uart
interface = uart
device = COM1
speed_uart_boot = 500000
speed_uart_load = 2000000
#cklink usb vid|pid
cklink_vidpid = 42bf|b210
cklink_type = CKLink_Lite_Vendor-rog
#eg: rv_dbg_plus, ft2232hl, ft2232d
openocd_config = rv_dbg_plus
auto_burn = false
speed_jlink = 1000
#0:without load, 1:eflash_loader load, 2: bootrom load
load_function = 2
do_reset = true
#reset retry+hold time
reset_hold_time = 50
shake_hand_delay = 100
reset_revert = false
cutoff_time = 50
shake_hand_retry = 3
flash_burn_retry = 1
checksum_err_retry = 3
erase_time_out = 100000
#chiptype=bl616d
check_mac = false
#0:no erase,1:programmed section erase,2:chip erase
erase = 1
# switch eflash_loader command log save
local_log = false
#0:verify by calculating SHA256(xip), >0:read back verify and verify by calculating SHA256(sbus)
verify = 0
tx_size = 2056
cpu_reset_after_load = false
#empty for auto, otherwise specified clock para file path: eg: chips/bl616d/efuse_bootheader/clock_para.bin
clock_para = ""
#skip mode set first para is skip addr, second para is skip len
skip_mode = 0x0, 0x0
boot2_isp_mode = 0
isp_mode_speed = 2000000
isp_shakehand_timeout = 0
host_rx_timeout = 2
#user password,eg:"78563412785634227856343278563442"
password=""

[FLASH_CFG]
flash_id = ef4016
#bit 7-4 flash_clock_type: 0:120M wifipll, 1:xtal, 2:128M cpupll, 3:80M wifipll, 4:bclk, 5:96M wifipll
#bit 3-0 flash_clock_div
flash_clock_cfg = 0x43
#0:0.5T delay, 1:1T delay, 2:1.5T delay, 3:2T delay
flash_clock_delay = 1
#0:NIO, 1:DO, 2:QO, 3:DIO, 4:QIO
flash_io_mode = 1
#flash_pin value:
#bit 7 flash pin set from efuse flash cfg
#bit 6 flash select 0: flash1, 1: flash2
#bit 5-0 flash pin cfg:
#0x0: single flash, sf1 internal swap io3 and io0
#0x1: single flash, sf1 internal swap io3 with io0 and io2 with cs
#0x2: single flash, sf1 internal no swap
#0x3: single flash, sf1 internal swap io2 with cs
#0x4: single flash, sf2 external GPIO34-39 and swap io3 with io0
#0x8: single flash, sf3 external GPIO43-48
#0x14:dual flash, sf1 internal swap io3 and io0, sf2 external GPIO34-39 swap io3 with io0
#0x15:dual flash, sf1 internal swap io3 with io0 and io2 with cs, sf2 external GPIO34-39swap io3 with io0
#0x16:dual flash, sf1 internal no swap, sf2 external GPIO34-39 swap io3 with io0
#0x17:dual flash, sf1 internal swap io2 with cs, sf2 external GPIO34-39 swap io3 with io0
#0x24:single flash, sf2 external GPIO34-39
#0x34:dual flash, sf1 internal swap io3 and io0, sf2 external GPIO34-39 no swap
#0x35:dual flash, sf1 internal swap io3 with io0 and io2 with cs, sf2 external GPIO34-39 no swap
#0x36:dual flash, sf1 internal no swap, sf2 external GPIO34-39 no swap
#0x37:dual flash, sf1 internal swap io2 with cs, sf2 external GPIO34-39 no swap
#0x80:flash pin set from efuse flash cfg
flash_pin = 0x80
#empty for auto, otherwise specified flash para file path: eg: chips/bl616d/efuse_bootheader/flash_para.bin
flash_para = chips/bl616d/efuse_bootheader/flash_para.bin
#empty for not set,otherwise specified flash para file path: eg: chips/bl616d/efuse_bootheader/flash_otp_para.bin
#Parsing the meaning of the incoming "flash_otp_para.bin" : eg: 0310010001000B01020535000102
#[0x03]: flash security register region count
#[0x10]: flash security register region size, unit 256B
#[0x01]: flash security register valid size, unit 256B
#[0x00]: flash security register api type
#[0x01]: flash security register address offset, unit region_size
#[0x00]: lock bit effect for all region
#[0x0B]: lock bit offset in all status register
#[0x01]: lock bit write status register write command
#[0x02]: lock bit write status register write len
#[0x05]: lock bit read status register read command[0]
#[0x35]: lock bit read status register read command[1]
#[0x00]: lock bit read status register read command[2]
#[0x01]: lock bit read status register read len
#[0x02]: lock bit read status register read loop count
flash_otp_para = 
decompress_write = true
file = chips/bl616d/img_create2/whole_img.bin
address = 00000000

[FLASH2_CFG]
flash2_en = false
#flash size, 0:0.5M, 1:1M, 2:2M, 4: 4M, 8: 8M, 16: 16M
flash1_size = 4
flash2_size = 2
flash2_id = ef4015
flash2_clock_cfg = 0x41
#0:0.5T delay, 1:1T delay, 2:1.5T delay, 3:2T delay
flash2_clock_delay = 0
#0:NIO, 1:DO, 2:QO, 3:DIO, 4:QIO
flash2_io_mode = 0x10
#flash_pin value:
#bit 7 flash pin set from efuse flash cfg
#bit 6 flash select 0: flash1, 1: flash2
#bit 5-0 flash pin cfg:
#0x0: single flash, sf1 internal swap io3 and io0
#0x1: single flash, sf1 internal swap io3 with io0 and io2 with cs
#0x2: single flash, sf1 internal no swap
#0x3: single flash, sf1 internal swap io2 with cs
#0x4: single flash, sf2 external GPIO34-39 and swap io3 with io0
#0x8: single flash, sf3 external GPIO43-48
#0x14:dual flash, sf1 internal swap io3 and io0, sf2 external GPIO34-39 swap io3 with io0
#0x15:dual flash, sf1 internal swap io3 with io0 and io2 with cs, sf2 external GPIO34-39swap io3 with io0
#0x16:dual flash, sf1 internal no swap, sf2 external GPIO34-39 swap io3 with io0
#0x17:dual flash, sf1 internal swap io2 with cs, sf2 external GPIO34-39 swap io3 with io0
#0x24:single flash, sf2 external GPIO34-39
#0x34:dual flash, sf1 internal swap io3 and io0, sf2 external GPIO34-39 no swap
#0x35:dual flash, sf1 internal swap io3 with io0 and io2 with cs, sf2 external GPIO34-39 no swap
#0x36:dual flash, sf1 internal no swap, sf2 external GPIO34-39 no swap
#0x37:dual flash, sf1 internal swap io2 with cs, sf2 external GPIO34-39 no swap
#0x80:flash pin set from efuse flash cfg
flash2_pin = 0xC0
#empty for auto, otherwise specified flash para file path: eg: chips/bl616d/efuse_bootheader/flash2_para.bin
flash2_para = chips/bl616d/efuse_bootheader/flash2_para.bin

[EFUSE_CFG]
#true: enable efuse burn
burn_en = true
#true: perform efuse verification after efuse burn
factory_mode = false
#true: enable encrypted transmission
security_write = false
#true: efuse data saved as an encrypted file
security_save = true
file = ../../../Tools/img_tools/efuse_bootheader/efusedata.bin
maskfile = ../../../Tools/img_tools/efuse_bootheader/efusedata_mask.bin

[THIRD_CFG]
amazon_header_enable = false
out_encrypt_file = ""
after_encrypt_hook = ""
in_signed_header = ""
