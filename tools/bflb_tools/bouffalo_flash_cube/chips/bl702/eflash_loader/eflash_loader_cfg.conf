[LOAD_CFG]
#jlink or uart
interface = uart
device = COM1
speed_uart_boot = 500000
speed_uart_load = 500000
#cklink usb vid|pid
cklink_vidpid = 42bf|b210
cklink_type = CKLink_Lite_Vendor-rog
#eg: rv_dbg_plus, ft2232hl, ft2232d
openocd_config = rv_dbg_plus
auto_burn = false
speed_jlink = 2000
#0:without load, 1:eflash_loader load
load_function = 1
do_reset = true
#reset retry+hold time
reset_hold_time = 50
shake_hand_delay = 100
reset_revert = false
cutoff_time = 50
shake_hand_retry = 3
flash_burn_retry = 1
checksum_err_retry = 3
#1: 32M, 2: RC32M
#xtal_type = 2
erase_time_out = 15000
#chiptype=702
eflash_loader_file=chips/bl702/eflash_loader/eflash_loader_32m.bin
check_mac = true
#0:no erase,1:programmed section erase,2:chip erase
erase = 1
# switch eflash_loader command log save
local_log = false
#0:verify by calculating SHA256(xip), >0:read back verify and verify by calculating SHA256(sbus)
verify = 0
tx_size = 2056
cpu_reset_after_load = false
#skip mode set first para is skip addr, second para is skip len
skip_mode = 0x0, 0x0
boot2_isp_mode = 0
isp_mode_speed = 2000000
isp_shakehand_timeout = 0
host_rx_timeout = 2

[FLASH_CFG]
flash_id = c84015
#flash clock 0:72M, 1:36M, 2:24M, 3:18M
flash_clock_cfg = 2
#0:NIO, 1:DO, 2:QO, 3:DIO, 4:QIO
flash_io_mode = 1
#flash_pin value:
#empty or 0xff: depend on efuse flash cfg
#bit 2-3 = flash_cfg: 0: external gpio 23-28, 1: internal 512K, 2: internal 1M, 3: external gpio 17-22
#bit 0-1 = swap_cfg: 0: do not swap, 1: swap cs&io2, 2: swap io0&io3, 3: swap cs&io2 io0&io3 both
flash_pin = ""
#empty for auto, otherwise specified para file path: eg: chips/bl702/efuse_bootheader/flash_para.bin
flash_para = chips/bl702/efuse_bootheader/flash_para.bin
decompress_write = true
file = chips/bl702/img_create/bootinfo_boot2.bin chips/bl702/img_create/img_boot2.bin chips/bl702/partition/partition.bin chips/bl702/partition/partition.bin
address = 00000000 00002000 e000 f000

[EFUSE_CFG]
#true: enable efuse burn
burn_en = true
#true: perform efuse verification after efuse burn
factory_mode = false
#true: enable encrypted transmission
security_write = false
#true: efuse data saved as an encrypted file
security_save = true
file = ../../../Tools/img_tools/efuse_bootheader/efusedata.bin
maskfile = ../../../Tools/img_tools/efuse_bootheader/efusedata_mask.bin
