# # PRIV_CONFIG_GEN_BLE is and should only be defined in bouffalo.mk in the 'blecontroller_*' component
# ifeq ($(CONFIG_CHIP_NAME),BL702)
# PRIV_CONFIG_GEN_BLE ?= $(CONFIG_BLECONTROLLER_LIB)
# else ifeq ($(CONFIG_CHIP_NAME),BL602)
# PRIV_CONFIG_GEN_BLE ?= $(CONFIG_BLECONTROLLER_LIB)
# else
# PRIV_CONFIG_GEN_BLE ?= $(CONFIG_BTBLECONTROLLER_LIB)
# endif
if(NOT CONFIG_BT_CONTROLLER_DISABLE)
if("${CHIP}" STREQUAL "bl702")
	sdk_ifndef(PRIV_CONFIG_GEN_BLE ${CONFIG_BLECONTROLLER_LIB})
elseif("${CHIP}" STREQUAL "bl602")
	sdk_ifndef(PRIV_CONFIG_GEN_BLE ${CONFIG_BLECONTROLLER_LIB})
else()
	sdk_ifndef(PRIV_CONFIG_GEN_BLE ${CONFIG_BTBLECONTROLLER_LIB})
endif()
endif()

####################################################################################################################################
#Note:
#Below flags are also used by bluetooth controller, SDK user shall not change it because bluetooth controller is provided as library.
#CONFIG_BT_CONN
#CONFIG_BT_ALLROLES
#CONFIG_BT_CENTRAL
#CONFIG_BT_PERIPHERAL
#CONFIG_BT_OBSERVER
#CONFIG_BT_BROADCASTER
#CONFIG_BT_BREDR
####################################################################################################################################

# 
# CHIP_LIST := BL702 BL602
# ifeq ($(filter $(CONFIG_CHIP_NAME), $(CHIP_LIST)),$(CONFIG_CHIP_NAME))
# ifeq ($(PRIV_CONFIG_GEN_BLE),m1s1)
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BT_MESH := 0
# CONFIG_BT_ALLROLES := 1
# CONFIG_BT_CENTRAL := 1
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BLE_TP_SERVER := 1
# CONFIG_BT_OAD_SERVER := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# endif
if(("${CHIP}" STREQUAL "bl702") OR ("${CHIP}" STREQUAL "bl602"))
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m1s1")
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BT_MESH n)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_BT_CENTRAL y)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BLE_TP_SERVER y)
		set(CONFIG_BT_OAD_SERVER y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s1)
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BT_MESH := 0
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_OBSERVER := 0
# CONFIG_BT_BROADCASTER := 0
# CONFIG_DISABLE_BT_SMP := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BT_ECC := 1
# CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_DISABLE_BLE_CONTROLLER_SEC_CON := 1
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s1")
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BT_MESH n)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_BT_BROADCASTER n)
		set(CONFIG_DISABLE_BT_SMP y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BT_ECC y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_SEC_CON y)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s1s)
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BT_MESH := 0
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_BT_BROADCASTER := 0
# CONFIG_DISABLE_BT_SMP := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BT_ECC := 1
# CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_DISABLE_BLE_CONTROLLER_SEC_CON := 1
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s1s")
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BT_MESH n)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_BT_BROADCASTER n)
		set(CONFIG_DISABLE_BT_SMP y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BT_ECC y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_SEC_CON y)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s1p)
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BT_MESH := 0
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_OBSERVER := 0
# CONFIG_BT_BROADCASTER := 0
# CONFIG_DISABLE_BT_SMP := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_BT_GATT_CLIENT := 0
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s1p")
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BT_MESH n)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_BT_BROADCASTER n)
		set(CONFIG_DISABLE_BT_SMP y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_BT_GATT_CLIENT n)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s0sp)
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 0
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BT_MESH := 0
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 0
# CONFIG_BT_OBSERVER := 1
# CONFIG_BT_BROADCASTER := 0
# CONFIG_DISABLE_BT_SMP := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s0sp")
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 0)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BT_MESH n)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL n)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_BT_BROADCASTER n)
		set(CONFIG_DISABLE_BT_SMP y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m8s1)
# CONFIG_BT_CONN := 8
# CONFIG_BLE_TX_BUFF_DATA := 8
# CONFIG_BT_ALLROLES := 1
# CONFIG_BT_CENTRAL := 1
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m8s1")
		set(CONFIG_BT_CONN 8)
		set(CONFIG_BLE_TX_BUFF_DATA 8)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_BT_CENTRAL y)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_PHY_UPDATE y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m16s1)
# CONFIG_BT_CONN := 16
# CONFIG_BLE_TX_BUFF_DATA := 16
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 1
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_BT_BROADCASTER := 0
# CONFIG_BLE_STACK_DBG_PRINT := 0
# CONFIG_DISABLE_BT_SMP := 1
# CONFIG_SIMPLE_MASTER := 1
# CONFIG_EM_16K := 1
# endif
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m16s1")
		set(CONFIG_BT_CONN 16)
		set(CONFIG_BLE_TX_BUFF_DATA 16)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL y)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_BT_BROADCASTER n)
		set(CONFIG_BLE_STACK_DBG_PRINT n)
		set(CONFIG_DISABLE_BT_SMP y)
		set(CONFIG_SIMPLE_MASTER y)
		set(CONFIG_EM_16K y)
	endif()
endif()
# 
# 
# ifeq ($(CONFIG_CHIP_NAME),BL702L)
# CONFIG_BT := 0
# CONFIG_CIS := 0
# CONFIG_ADV_EXTENSION := 0
# CONFIG_BIS := 0
# CONFIG_LE_PWR_CTRL := 0
# CONFIG_CTE := 0
# CONFIG_EM_SIZE ?= 16
if("${CHIP}" STREQUAL "bl702l")
	set(CONFIG_BT n)
	set(CONFIG_CIS n)
	set(CONFIG_ADV_EXTENSION n)
	set(CONFIG_BIS n)
	set(CONFIG_LE_PWR_CTRL n)
	set(CONFIG_CTE n)
	set(CONFIG_EM_SIZE 16)
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s1rp)
# CONFIG_BL702L_A1 := 1
# CONFIG_BUILD_BLE_ROM_CODE := 0
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 5
# #CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_OBSERVER := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 0
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s1rp")
		set(CONFIG_BL702L_A1 y)
		set(CONFIG_BUILD_BLE_ROM_CODE n)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 5)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER n)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m1s1p)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m1s1p")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m2s1p)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 2
# CONFIG_BLE_TX_BUFF_DATA := 4
# CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m2s1p")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 2)
		set(CONFIG_BLE_TX_BUFF_DATA 4)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m4s1p)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 4
# CONFIG_BLE_TX_BUFF_DATA := 6
# CONFIG_BLE_ACT_MAX := 6
# CONFIG_BT_ALLROLES := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m4s1p")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 4)
		set(CONFIG_BLE_TX_BUFF_DATA 6)
		set(CONFIG_BLE_ACT_MAX 6)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m8s1p)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 8
# CONFIG_BLE_TX_BUFF_DATA := 8
# CONFIG_BLE_ACT_MAX := 10
# CONFIG_BT_ALLROLES := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m8s1p")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 8)
		set(CONFIG_BLE_TX_BUFF_DATA 8)
		set(CONFIG_BLE_ACT_MAX 10)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s1p)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 0
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s1p")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY  y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG  n)
		set(CONFIG_CLK_ACC  n)
		set(CONFIG_LE_PING  n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s1sp)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s1sp")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY  y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG  n)
		set(CONFIG_CLK_ACC  n)
		set(CONFIG_LE_PING  n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s2p)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 2
# CONFIG_BLE_TX_BUFF_DATA := 4
# CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 0
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
# 
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s2p")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 2)
		set(CONFIG_BLE_TX_BUFF_DATA 4)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
#
# ifeq ($(PRIV_CONFIG_GEN_BLE),m0s4p)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 4
# CONFIG_BLE_TX_BUFF_DATA := 6
# CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 0
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
# endif
#
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "m0s4p")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 4)
		set(CONFIG_BLE_TX_BUFF_DATA 6)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
#
#ifeq ($(PRIV_CONFIG_GEN_BLE),uarthci)
#CONFIG_BUILD_BLE_ROM_CODE := 1
#CONFIG_BLE_PDS := 1
#CONFIG_BT_CONN := 1
#CONFIG_BLE_TX_BUFF_DATA := 2
#CONFIG_BLE_ACT_MAX := 5
#CONFIG_BT_ALLROLES := 1
#CONFIG_DISABLE_BT_HOST_PRIVACY := 1
#CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
#CONFIG_BLE_HOST_DISABLE:=1
#CONFIG_EM_SIZE = 8
#CONFIG_LONG_RANG := 0
#CONFIG_CLK_ACC := 0
#CONFIG_LE_PING := 0
#endif
#
 	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "uarthci")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_BLE_HOST_DISABLE y)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
#
# ifeq ($(PRIV_CONFIG_GEN_BLE),uarthcilp)
# CONFIG_BUILD_BLE_ROM_CODE := 1
# CONFIG_LP_HCIUART := 1
# CONFIG_BLE_PDS := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# CONFIG_BLE_ACT_MAX := 5
# CONFIG_BT_ALLROLES := 1
# CONFIG_DISABLE_BT_HOST_PRIVACY := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_BLE_HOST_DISABLE:=1
# CONFIG_EM_SIZE = 8
# CONFIG_LONG_RANG := 0
# CONFIG_CLK_ACC := 0
# CONFIG_LE_PING := 0
#endif
#
 	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "uarthcilp")
		set(CONFIG_BUILD_BLE_ROM_CODE y)
		set(CONFIG_LP_HCIUART y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 5)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BT_HOST_PRIVACY y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_BLE_HOST_DISABLE y)
		set(CONFIG_EM_SIZE 8)
		set(CONFIG_LONG_RANG n)
		set(CONFIG_CLK_ACC n)
		set(CONFIG_LE_PING n)
	endif()
#	
# endif
endif()
# 
# ifeq ($(CONFIG_CHIP_NAME),BL616) //bl808 add for bouffalosdk
# ifeq ($(PRIV_CONFIG_GEN_BLE),ble1m0s1bredr0)
# CONFIG_BT_BREDR := 0
# CONFIG_BLE_PDS := 1
# CONFIG_EM_SIZE := 32
# CONFIG_EM_HEAP_DISABLE := 1
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 0
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# #Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
# CONFIG_BLE_ACT_MAX := 7
# CONFIG_DISABLE_BT_ECC := 1
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_CTE := 0
# CONFIG_LE_PWR_CTRL := 0
# endif
if(("${CHIP}" STREQUAL "bl616") OR ("${CHIP}" STREQUAL "bl808") OR ("${CHIP}" STREQUAL "bl616d"))
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "ble1m0s1bredr0")
		set(CONFIG_BT_BREDR n)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_EM_HEAP_DISABLE y)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_DISABLE_BT_ECC y)
		set(CONFIG_ADV_EXTENSION n)
		set(CONFIG_CIS n)
		set(CONFIG_BIS n)
		set(CONFIG_CTE n)
		set(CONFIG_LE_PWR_CTRL n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),ble1m2s1bredr0)
# CONFIG_BT_BREDR := 0
# CONFIG_BLE_PDS := 1
# CONFIG_EM_SIZE := 32
# CONFIG_BT_ALLROLES := 1
# CONFIG_BT_CENTRAL := 1
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_BT_CONN := 2
# CONFIG_BLE_TX_BUFF_DATA := 4
# #Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
# CONFIG_BLE_ACT_MAX := 7
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_CTE := 0
# CONFIG_LE_PWR_CTRL := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "ble1m2s1bredr0")
		set(CONFIG_BT_BREDR n)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_BT_CENTRAL y)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_BT_CONN 2)
		set(CONFIG_BLE_TX_BUFF_DATA 4)
		#Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_ADV_EXTENSION n)
		set(CONFIG_CIS n)
		set(CONFIG_BIS n)
		set(CONFIG_CTE n)
		set(CONFIG_LE_PWR_CTRL n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),ble1m10s1bredr0)
# CONFIG_BT_BREDR := 0
# CONFIG_BLE_PDS := 1
# CONFIG_EM_SIZE=32
# CONFIG_BT_ALLROLES := 1
# CONFIG_BT_CENTRAL := 1
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_BT_CONN := 10
# CONFIG_BLE_TX_BUFF_DATA := 10
# CONFIG_BLE_ACT_MAX := 11
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_CTE := 0
# CONFIG_LE_PWR_CTRL := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "ble1m10s1bredr0")
		set(CONFIG_BT_BREDR n)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_BT_CENTRAL y)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_BT_CONN 10)
		set(CONFIG_BLE_TX_BUFF_DATA 10)
		set(CONFIG_BLE_ACT_MAX 12)
		set(CONFIG_ADV_EXTENSION n)
		set(CONFIG_CIS n)
		set(CONFIG_BIS n)
		set(CONFIG_CTE n)
		set(CONFIG_LE_PWR_CTRL n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),ble1m0s1sbredr0)
# CONFIG_BT_BREDR := 0
# CONFIG_BLE_PDS := 1
# CONFIG_EM_SIZE=32
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# #Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
# CONFIG_BLE_ACT_MAX := 7
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_CTE := 0
# CONFIG_LE_PWR_CTRL := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "ble1m0s1sbredr0")
		set(CONFIG_BT_BREDR n)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_ADV_EXTENSION n)
		set(CONFIG_CIS n)
		set(CONFIG_BIS n)
		set(CONFIG_CTE n)
		set(CONFIG_LE_PWR_CTRL n)
	endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),ble1m0s1sbredr1)
# CONFIG_BT_BREDR := 1
# CONFIG_EM_SIZE=32
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_BT_CONN := 1
# CONFIG_BLE_TX_BUFF_DATA := 2
# #Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
# CONFIG_BLE_ACT_MAX := 7
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_CTE := 0
# CONFIG_LE_PWR_CTRL := 0
# endif
# endif
        if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "ble1m0s1sbredr1")
		set(CONFIG_BT_BREDR y)
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_BT_CONN 1)
		set(CONFIG_BLE_TX_BUFF_DATA 2)
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_ADV_EXTENSION n)
		set(CONFIG_CIS n)
		set(CONFIG_BIS n)
		set(CONFIG_CTE n)
		set(CONFIG_LE_PWR_CTRL n)
        endif()
# 
# ifeq ($(PRIV_CONFIG_GEN_BLE),ble1m2s1bredr1)
# CONFIG_BT_BREDR := 1
# CONFIG_BLE_PDS := 1
# CONFIG_EM_SIZE := 32
# CONFIG_BT_ALLROLES := 1
# CONFIG_BT_CENTRAL := 1
# CONFIG_BT_PERIPHERAL := 1
# CONFIG_BT_BROADCASTER := 1
# CONFIG_BT_OBSERVER := 1
# CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 1
# CONFIG_BT_CONN := 2
# CONFIG_BLE_TX_BUFF_DATA := 4
# #Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
# CONFIG_BLE_ACT_MAX := 7
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_CTE := 0
# CONFIG_LE_PWR_CTRL := 0
# endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "ble1m2s1bredr1")
		set(CONFIG_BT_BREDR y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_BT_CENTRAL y)
		set(CONFIG_BT_PERIPHERAL y)
		set(CONFIG_BT_BROADCASTER y)
		set(CONFIG_BT_OBSERVER y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE y)
		set(CONFIG_BT_CONN 2)
		set(CONFIG_BLE_TX_BUFF_DATA 4)
		#Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_ADV_EXTENSION n)
		set(CONFIG_CIS n)
		set(CONFIG_BIS n)
		set(CONFIG_CTE n)
		set(CONFIG_LE_PWR_CTRL n)
	endif()
#
#ifeq ($(PRIV_CONFIG_GEN_BLE),uarthci)
#CONFIG_BT_BREDR := 1
#CONFIG_BLE_HOST_DISABLE:= 1
#CONFIG_EM_SIZE := 64
#CONFIG_BT_ALLROLES := 1
#CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
#CONFIG_BT_CONN := 2
#CONFIG_BLE_TX_BUFF_DATA := 4
#CONFIG_BLE_ACT_MAX := 7
#CONFIG_CIS := 0
#CONFIG_BIS := 0
#CONFIG_CTE := 0
#endif
#
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "uarthci")
		set(CONFIG_BT_BREDR y)
		set(CONFIG_BLE_HOST_DISABLE y)
		set(CONFIG_EM_SIZE 64)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_BT_CONN 2)
		set(CONFIG_BLE_TX_BUFF_DATA 4)
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_BIS y)
		set(CONFIG_CTE n)
		set(CONFIG_CIS y)
	endif()
#
#ifeq ($(PRIV_CONFIG_GEN_BLE),bleuarthci)
#CONFIG_BT_BREDR := 0
#CONFIG_BLE_HOST_DISABLE:= 1
#CONFIG_EM_SIZE := 64
#CONFIG_BT_ALLROLES := 1
#CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
#CONFIG_BT_CONN := 2
#CONFIG_BLE_TX_BUFF_DATA := 4
#CONFIG_BLE_ACT_MAX := 7
#CONFIG_CIS := 1
#CONFIG_BIS := 1
#CONFIG_CTE := 0
#endif
#
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "bleuarthci")
		set(CONFIG_BT_BREDR n)
		set(CONFIG_BLE_HOST_DISABLE y)
		set(CONFIG_EM_SIZE 64)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_BT_CONN 2)
		set(CONFIG_BLE_TX_BUFF_DATA 4)
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_BIS y)
		set(CONFIG_CTE n)
		set(CONFIG_CIS y)
	endif()
#
#ifeq ($(PRIV_CONFIG_GEN_BLE),blespihci)
#CONFIG_NXSPI_HCI :=1
#CONFIG_BT_BREDR := 0
#CONFIG_BLE_HOST_DISABLE:= 1
#CONFIG_EM_SIZE := 32
#CONFIG_BT_ALLROLES := 1
#CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE := 0
#CONFIG_BT_CONN := 2
#CONFIG_BLE_TX_BUFF_DATA := 4
#CONFIG_BLE_ACT_MAX := 7
#CONFIG_CIS := 1
#CONFIG_BIS := 1
#CONFIG_CTE := 0
#endif
#
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "blespihci")
		set(CONFIG_NXSPI_HCI y)
		set(CONFIG_BT_BREDR n)
		set(CONFIG_BLE_HOST_DISABLE y)
		set(CONFIG_BLE_PDS y)
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_BT_ALLROLES y)
		set(CONFIG_DISABLE_BLE_CONTROLLER_TEST_MODE n)
		set(CONFIG_BT_CONN 2)
		set(CONFIG_BLE_TX_BUFF_DATA 4)
		set(CONFIG_BLE_ACT_MAX 7)
		set(CONFIG_BIS y)
		set(CONFIG_CTE n)
		set(CONFIG_CIS y)
	endif()
#
#ifeq ($(PRIV_CONFIG_GEN_BLE),mfg)
#CONFIG_EM_SIZE := 32
#CONFIG_BLE_MFG := 1
#CONFIG_BT_MFG := 1
#CONFIG_BLE_MFG_HCI_CMD := 1
#CONFIG_BT_MFG_HCI_CMD := 1
#endif
	if("${PRIV_CONFIG_GEN_BLE}" STREQUAL "mfg")
		set(CONFIG_EM_SIZE 32)
		set(CONFIG_BLE_MFG y)
		set(CONFIG_BT_MFG y)
		set(CONFIG_BLE_MFG_HCI_CMD y)
		set(CONFIG_BT_MFG_HCI_CMD y)
	endif()
endif()
# 
# ifndef CONFIG_FREERTOS_DISABLE
# CFLAGS   += -DCONFG_FREERTOS
# endif
if(NOT DEFINED CONFIG_FREERTOS_DISABLE)
	sdk_add_compile_definitions(-DCONFG_FREERTOS)
endif()
# 
# CFLAGS   += -DARCH_RISCV
# 
# ifeq ($(CONFIG_CHIP_NAME),BL602)
# CFLAGS   += -DBL602
# CFLAGS   += -DCONFIG_SET_TX_PWR
# endif
if("${CHIP}" STREQUAL "bl602")
#	sdk_add_compile_definitions(-DBL602)
	sdk_add_compile_definitions(-DCONFIG_SET_TX_PWR)
endif()
# 
# ifeq ($(CONFIG_CHIP_NAME),BL702)
# CFLAGS   += -DBL702
# endif
if("${CHIP}" STREQUAL "bl702")
#	sdk_add_compile_definitions(-DBL702)
endif()
# 
# ifeq ($(CONFIG_CHIP_NAME),BL606P)
# CFLAGS   += -DBL606P
# CONFIG_BT_RESET=0
# endif
if("${CHIP}" STREQUAL "bl606p")
#	sdk_add_compile_definitions(-DBL606P)
	set(CONFIG_BT_RESET, n)
endif()
# 
# ifeq ($(CONFIG_CHIP_NAME),BL808)
# CFLAGS   += -DBL808
# CONFIG_BT_RESET=0
# endif
if("${CHIP}" STREQUAL "bl808")
#	sdk_add_compile_definitions(-DBL808)
	set(CONFIG_BT_RESET, n)
endif()
# 
# ifeq ($(CONFIG_CHIP_NAME),BL616)
# CFLAGS   += -DBL616
# CONFIG_BT_RESET=0
# endif
if("${CHIP}" STREQUAL "bl616")
#	sdk_add_compile_definitions(-DBL616)
	set(CONFIG_BT_RESET, n)
endif()
# ifeq ($(CONFIG_CHIP_NAME),BL616D)
# CFLAGS   += -DBL616D
# CONFIG_BT_RESET=0
# endif
if("${CHIP}" STREQUAL "bl616d")
#	sdk_add_compile_definitions(-DBL616D)
	set(CONFIG_BT_RESET, n)
endif()
# 
# ifeq ($(CONFIG_CHIP_NAME),BL808)
# CFLAGS   += -DBL808
# CONFIG_BT_RESET=0
# endif
if("${CHIP}" STREQUAL "bl808")
#	sdk_add_compile_definitions(-DBL808)
	set(CONFIG_BT_RESET, n)
endif()
# 
# ifeq ($(CONFIG_CHIP_NAME),BL702L)
# CFLAGS   += -DBL702L
# endif
if("${CHIP}" STREQUAL "bl702l")
#	sdk_add_compile_definitions(-DBL702L)
endif()
# 
# ifeq ($(CONFIG_DBG_RUN_ON_FPGA), y)
# CFLAGS   += -DCONFG_DBG_RUN_ON_FPGA
# endif
sdk_add_compile_definitions_ifdef(CONFIG_DBG_RUN_ON_FPGA -DCONFG_DBG_RUN_ON_FPGA)
# 
# ifeq ($(CONFIG_BUILD_ROM_CODE),1)
# CFLAGS += -DBUILD_ROM_CODE
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BUILD_ROM_CODE -DBUILD_ROM_CODE)
# 
# CFLAGS   += -DCONFG_BLE_ENABLE
# CPPFLAGS += -DCONFG_BLE_ENABLE
# 
# CFLAGS   += -DBFLB_BLE
# CFLAGS   += -DCONFG_BLE
sdk_add_compile_definitions(-DCONFG_BLE_ENABLE)
sdk_add_compile_definitions(-DBFLB_BLE)
sdk_add_compile_definitions(-DCONFIG_BLE)
#
# CONFIG_BL702L_A1?=0
sdk_ifndef(CONFIG_BL702L_A1 n)
#
# CONFIG_BT_BREDR?=0
# ifeq ($(CONFIG_BT_BREDR),0)
# CONFIG_BT=0
# else
# CONFIG_BT=1
# CONFIG_BT_A2DP?=1
# CONFIG_BT_A2DP_SOURCE?=0
# CONFIG_BT_AVRCP?=1
# CONFIG_BT_HFP?=1
# ifeq ($(CONFIG_BT_A2DP),1)
# CFLAGS += -DCONFIG_BT_A2DP
# ifeq ($(CONFIG_BT_A2DP_SOURCE),1)
# CFLAGS += -DCONFIG_BT_A2DP_SOURCE
# endif
# endif
# ifeq ($(CONFIG_BT_AVRCP),1)
# CFLAGS += -DCONFIG_BT_AVRCP
# endif
# ifeq ($(CONFIG_BT_HFP),1)
# CFLAGS += -DCONFIG_BT_HFP
# endif
#ifeq ($(CONFIG_BT_SPP),1)
#CFLAGS += -DCONFIG_BT_SPP
#endif
#ifeq($(CONFIG_BT_BREDR_PTS),1)
#CFLAGS += -DBR_EDR_PTS_TEST
#endif
# CFLAGS += -DCONFIG_BT_BREDR
# CFLAGS += -DCONFIG_MAX_SCO=2
# CFLAGS += -DSBC_DEC_INCLUDED
# CFLAGS += -DSBC_ENC_INCLUDED
# CFLAGS += -DCONFIG_BT_L2CAP_DYNAMIC_CHANNEL
# endif
sdk_ifndef(CONFIG_BT_BREDR n)
if(NOT CONFIG_BT_BREDR)
	set(CONFIG_BT n)
else()
	sdk_ifndef(CONFIG_BT y)
	sdk_ifndef(CONFIG_BT_A2DP y)
	sdk_ifndef(CONFIG_BT_A2DP_SOURCE n)
	sdk_ifndef(CONFIG_BT_A2DP_SINK y)
	sdk_ifndef(CONFIG_BT_AVRCP y)
	sdk_ifndef(CONFIG_BT_HFP n)
	if(CONFIG_BT_A2DP)
		sdk_add_compile_definitions(-DCONFIG_BT_A2DP)
		sdk_add_compile_definitions_ifdef(CONFIG_BT_A2DP_SOURCE -DCONFIG_BT_A2DP_SOURCE)
		sdk_add_compile_definitions_ifdef(CONFIG_BT_A2DP_SINK -DCONFIG_BT_A2DP_SINK)
	endif()
	sdk_add_compile_definitions_ifdef(CONFIG_BT_AVRCP -DCONFIG_BT_AVRCP)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_HFP -DCONFIG_BT_HFP)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_SPP -DCONFIG_BT_SPP)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_BREDR_PTS -DBR_EDR_PTS_TEST)
	sdk_add_compile_definitions(
		-DCONFIG_BT_BREDR
		-DCONFIG_MAX_SCO=2
		-DSBC_DEC_INCLUDED
		-DSBC_ENC_INCLUDED
		-DCONFIG_BT_L2CAP_DYNAMIC_CHANNEL
	)
endif()
#
# ifeq ($(CONFIG_BL702L_A1),1)
# CFLAGS += -DCONFG_BL702L_A1
# CONFIG_BLE_TX_BUFF_DATA = 2
# endif
#
if(CONFIG_BL702L_A1)
	sdk_add_compile_definitions(-DCONFG_BL702L_A1)
	set(CONFIG_BLE_TX_BUFF_DATA 2)
endif()
# 
# ifeq ($(CONFIG_BT_TL),1)
# CFLAGS += -DCONFIG_BT_TL
# CONFIG_BLE_HOST_DISABLE:=1
# endif
if(CONFIG_BT_TL)
	sdk_add_compile_definitions(-DCONFIG_BT_TL)
	set(CONFIG_BLE_HOST_DISABLE y)
endif()
# 
# ifeq ($(CONFIG_BL_SDK),1)
# CFLAGS += -DCONFIG_BL_SDK
# endif
# ifneq ($(CONFIG_IOT_SDK_DISABLE),1)
# CFLAGS   += -DCONFG_IOT_SDK
# endif
sdk_add_compile_definitions(-DCONFIG_BL_SDK)
# sdk_add_compile_definitions_ifndef(CONFIG_IOT_SDK_DISABLE -DCONFG_IOT_SDK)
# 
# CONFIG_EM_16K ?= 0
# ifeq ($(CONFIG_EM_16K),1)
# CFLAGS += -DCONFIG_EM_16K
# endif
sdk_ifndef(CONFIG_EM_16K n)
sdk_add_compile_definitions_ifdef(CONFIG_EM_16K -DCONFIG_EM_16K)
# 
# ifeq ($(CONFIG_BT_MFG),1)
# CFLAGS += -DCONFIG_BT_MFG
# ifeq ($(CONFIG_BT_MFG_HCI_CMD),1)
# CFLAGS   += -DCONFIG_BT_MFG_HCI_CMD
# endif
# CONFIG_BT := 1
# CONFIG_SCO_ESCO := 0
# CONFIG_PCA := 0
# CONFIG_RF_EXTRC := 0
# CONFIG_CSB := 0
# CONFIG_SNIFF := 0
# CONFIG_RSWITCH := 0
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_LE_PWR_CTRL ?= 0
# endif
if(CONFIG_BT_MFG)
	sdk_add_compile_definitions(-DCONFIG_BT_MFG)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MFG_HCI_CMD -DCONFIG_BT_MFG_HCI_CMD)
	set(CONFIG_BT y)
	set(CONFIG_SCO_ESCO n)
	set(CONFIG_PCA n)
	set(CONFIG_RF_EXTRC n)
	set(CONFIG_CSB n)
	set(CONFIG_SNIFF n)
	set(CONFIG_RSWITCH n)
	set(CONFIG_ADV_EXTENSION n)
	set(CONFIG_CIS n)
	set(CONFIG_BIS n)
	sdk_ifndef(CONFIG_LE_PWR_CTRL n)
endif()
# 
# CONFIG_BT ?= 1
# CONFIG_SCO_ESCO ?= 1
# CONFIG_PCA ?= 1
# CONFIG_RF_EXTRC ?= 1
# CONFIG_CSB ?= 1
# CONFIG_SNIFF ?= 1
# CONFIG_RSWITCH ?= 1
# CONFIG_TEST_MODE ?= 1
# CONFIG_BT_HCI_TEST_MODE ?= 1
# CONFIG_BT_DIRECT_TEST_MODE ?= 1
# CONFIG_BLE ?= 1
# CONFIG_CIS ?= 1
# CONFIG_ADV_EXTENSION ?= 1
# CONFIG_BIS ?= 1
# CONFIG_LONG_RANG ?= 1
# CONFIG_LE_PWR_CTRL ?= 1
# CONFIG_CTE ?= 1
# CONFIG_PHY_UPDATE ?= 1
# CONFIG_CLK_ACC ?= 1
# CONFIG_LE_PING ?= 1
# CONFIG_BT_REMOTE_VERSION ?= 0
sdk_ifndef(CONFIG_BT y)
sdk_ifndef(CONFIG_SCO_ESCO y)
sdk_ifndef(CONFIG_PCA y)
sdk_ifndef(CONFIG_RF_EXTRC y)
sdk_ifndef(CONFIG_CSB y)
sdk_ifndef(CONFIG_SNIFF y)
sdk_ifndef(CONFIG_RSWITCH y)
sdk_ifndef(CONFIG_TEST_MODE y)
sdk_ifndef(CONFIG_BT_HCI_TEST_MODE y)
sdk_ifndef(CONFIG_BT_DIRECT_TEST_MODE y)
sdk_ifndef(CONFIG_BLE y)
sdk_ifndef(CONFIG_CIS y)
sdk_ifndef(CONFIG_ADV_EXTENSION y)
sdk_ifndef(CONFIG_BIS y)
sdk_ifndef(CONFIG_LONG_RANG y)
sdk_ifndef(CONFIG_LE_PWR_CTRL y)
sdk_ifndef(CONFIG_CTE y)
sdk_ifndef(CONFIG_PHY_UPDATE y)
sdk_ifndef(CONFIG_CLK_ACC y)
sdk_ifndef(CONFIG_LE_PING y)
sdk_ifndef(CONFIG_BT_REMOTE_VERSION n)
# 
# #Update le adv data and scan rsp data when LE adertising is active, sw need 4 adv buffer at least. 
# CONFIG_BLE_ACT_MAX ?= 7
sdk_ifndef(CONFIG_BLE_ACT_MAX 7)
# 
# CONFIG_HW_SEC_ENG_DISABLE?=0
sdk_ifndef(CONFIG_HW_SEC_ENG_DISABLE n)
# 
# CONFIG_BT_CONN?=1
# CFLAGS += -DCONFG_CON=$(CONFIG_BT_CONN)
# CONFIG_BLE_TX_BUFF_DATA?=2
# CFLAGS += -DCONFG_BLE_TX_BUFF_DATA=$(CONFIG_BLE_TX_BUFF_DATA)
# CONFIG_BT_ALLROLES?=1
# CONFIG_BT_CENTRAL?=1
# CONFIG_BT_OBSERVER?=1
# CONFIG_BT_PERIPHERAL?=1
# CONFIG_BT_BROADCASTER?=1
# CONFIG_BT_SETTINGS?=0
# CONFIG_BLE_TP_SERVER?=0
# CONFIG_BLE_MULTI_ADV?=0
# CONFIG_BLE_RECONNECT_TEST?=0
# CONFIG_BT_STACK_CLI?=1
# CONFIG_BT_TP_CLI?=0
# CONFIG_BLE_STACK_DBG_PRINT?=1
# CONFIG_BT_STACK_PTS?=0
# CONFIG_BT_MESH_PTS?=0
# CONFIG_BLE_TP_TEST?=0
# CONFIG_BT_GEN_RANDOM_BY_SW?=0 #If BLE host generate random value by software
# CONFIG_DISABLE_BT_SMP?=0
# CONFIG_DISABLE_BT_HOST_PRIVACY?=1
# CONFIG_BT_L2CAP_DYNAMIC_CHANNEL?=0
# CONFIG_BT_GATT_CLIENT?=1
# CONFIG_BT_DATA_LEN_UPDATE?=0
# CONFIG_BT_MESH?=0
# CONFIG_BT_MESH_MODEL?=0
sdk_ifndef(CONFIG_BT_CONN 1)
sdk_add_compile_definitions(-DCONFIG_CON=${CONFIG_BT_CONN})
sdk_ifndef(CONFIG_BLE_TX_BUFF_DATA 2)
sdk_add_compile_definitions(-DCONFIG_BLE_TX_BUFF_DATA=${CONFIG_BLE_TX_BUFF_DATA})
sdk_ifndef(CONFIG_BT_ALLROLES y)
sdk_ifndef(CONFIG_BT_CENTRAL y)
sdk_ifndef(CONFIG_BT_OBSERVER y)
sdk_ifndef(CONFIG_BT_PERIPHERAL y)
sdk_ifndef(CONFIG_BT_BROADCASTER y)
sdk_ifndef(CONFIG_BT_SETTINGS n)
sdk_ifndef(CONFIG_BLE_TP_SERVER n)
sdk_ifndef(CONFIG_BLE_MULTI_ADV n)
sdk_ifndef(CONFIG_BLE_RECONNECT_TEST n)
sdk_ifndef(CONFIG_BT_STACK_CLI y)
sdk_ifndef(CONFIG_BT_TP_CLI n)
sdk_ifndef(CONFIG_BLE_STACK_DBG_PRINT y)
sdk_ifndef(CONFIG_BT_STACK_PTS n)
sdk_ifndef(CONFIG_BT_MESH_PTS n)
sdk_ifndef(CONFIG_BLE_TP_TEST n)
sdk_ifndef(CONFIG_BT_GEN_RANDOM_BY_SW n)
sdk_ifndef(CONFIG_DISABLE_BT_SMP n)
sdk_ifndef(CONFIG_DISABLE_BT_HOST_PRIVACY y)
sdk_ifndef(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL n)
sdk_ifndef(CONFIG_BT_GATT_CLIENT y)
sdk_ifndef(CONFIG_BT_DATA_LEN_UPDATE y)
sdk_ifndef(CONFIG_BT_MESH n)
sdk_ifndef(CONFIG_BT_MESH_MODEL n)
# ifeq ($(CONFIG_BT_MESH),1)
# CONFIG_BT_MESH_CLI ?= 1
# CONFIG_BT_MESH_PB_ADV?=1
# CONFIG_BT_MESH_RELAY?=1
# CONFIG_BT_MESH_PB_GATT?=1
# CONFIG_BT_MESH_FRIEND?=1
# CONFIG_BT_MESH_LOW_POWER?=1
# CONFIG_BT_MESH_PROXY?=1
# CONFIG_BT_MESH_GATT_PROXY?=1
# CONFIG_BT_MESH_MOD_BIND_CB?=0
# CONFIG_BT_MESH_APPKEY_ADD_CB?=0
# CONFIG_BT_MESH_MOD_SUB_ADD_CB?=0
# ifeq ($(CONFIG_BT_MESH_MODEL), y)
# CONFIG_BT_MESH_MODEL_GEN_SRV?=1
# CONFIG_BT_MESH_MODEL_GEN_CLI?=1
# CONFIG_BT_MESH_MODEL_LIGHT_SRV?=1
# CONFIG_BT_MESH_MODEL_LIGHT_CLI?=1
# else
# CONFIG_BT_MESH_MODEL_GEN_SRV?=1
# endif
# CONFIG_BT_MESH_PROVISIONER?=0
# ifeq ($(CONFIG_BT_MESH_PROVISIONER),1)
# CONFIG_BT_MESH_CDB?=1
# else
# CONFIG_BT_MESH_CDB?=0
# endif
# CONFIG_BT_MESH_SYNC?=0
# CONFIG_BT_MESH_NODE_SEND_CFGCLI_MSG?=0 # Config mesh normal node can send configure client message or not.
# endif
if(CONFIG_BT_MESH)
    sdk_ifndef(CONFIG_BT_MESH_CLI y)
    sdk_ifndef(CONFIG_BT_MESH_PB_ADV y)
    sdk_ifndef(CONFIG_BT_MESH_RELAY y)
    sdk_ifndef(CONFIG_BT_MESH_PB_GATT y)
    sdk_ifndef(CONFIG_BT_MESH_FRIEND y)
    sdk_ifndef(CONFIG_BT_MESH_LOW_POWER y)
	sdk_ifndef(CONFIG_BT_MESH_PROXY y)
    sdk_ifndef(CONFIG_BT_MESH_GATT_PROXY y)
    sdk_ifndef(CONFIG_BT_MESH_MOD_BIND_CB n)
    sdk_ifndef(CONFIG_BT_MESH_APPKEY_ADD_CB n)
    sdk_ifndef(CONFIG_BT_MESH_MOD_SUB_ADD_CB n)
    if(CONFIG_BT_MESH_MODEL)
		sdk_ifndef(CONFIG_BT_MESH_MODEL_GEN_SRV y)
		sdk_ifndef(CONFIG_BT_MESH_MODEL_GEN_CLI y)
		sdk_ifndef(CONFIG_BT_MESH_MODEL_LIGHT_SRV y)
		sdk_ifndef(CONFIG_BT_MESH_MODEL_LIGHT_CLI y)
    else()
    	sdk_ifndef(CONFIG_BT_MESH_MODEL_GEN_SRV y)
    endif()
    sdk_ifndef(CONFIG_BT_MESH_PROVISIONER n)
    if(CONFIG_BT_MESH_PROVISIONER)
    	sdk_ifndef(CONFIG_BT_MESH_CDB y)
    else()
    	sdk_ifndef(CONFIG_BT_MESH_CDB n)
    endif()
    sdk_ifndef(CONFIG_BT_MESH_SYNC n)
    sdk_ifndef(CONFIG_BT_MESH_NODE_SEND_CFGCLI_MSG n)
endif()
# 
# ifeq ($(CONFIG_HW_SEC_ENG_DISABLE),1)
# CFLAGS += -DCONFIG_HW_SEC_ENG_DISABLE
# endif
sdk_add_compile_definitions_ifdef(CONFIG_HW_SEC_ENG_DISABLE -DCONFIG_HW_SEC_ENG_DISABLE)

# ifeq ($(CONFIG_LP_HCIUART),1)
# CFLAGS += -DCONFIG_LP_HCIUART
# endif
sdk_add_compile_definitions_ifdef(CONFIG_LP_HCIUART -DCONFIG_LP_HCIUART)

# 
# ##########################################
# ############## BLE STACK #################
# ##########################################
# 
# ifeq ($(CONFIG_BT_ALLROLES),1)
# 
# CFLAGS += -DCONFIG_BT_ALLROLES
# CFLAGS += -DCONFIG_BT_CENTRAL
# CFLAGS += -DCONFIG_BT_OBSERVER
# CFLAGS += -DCONFIG_BT_PERIPHERAL
# CFLAGS += -DCONFIG_BT_BROADCASTER
# 
# else
# 
# ifeq ($(CONFIG_BT_CENTRAL),1)
# CFLAGS += -DCONFIG_BT_CENTRAL
# endif
# ifeq ($(CONFIG_BT_OBSERVER),1)
# CFLAGS += -DCONFIG_BT_OBSERVER
# endif
# ifeq ($(CONFIG_BT_PERIPHERAL),1)
# CFLAGS += -DCONFIG_BT_PERIPHERAL
# endif
# ifeq ($(CONFIG_BT_BROADCASTER),1)
# CFLAGS += -DCONFIG_BT_BROADCASTER
# endif
# 
# endif
if(CONFIG_BT_ALLROLES)
	sdk_add_compile_definitions(
		-DCONFIG_BT_ALLROLES
		-DCONFIG_BT_CENTRAL
		-DCONFIG_BT_OBSERVER
		-DCONFIG_BT_PERIPHERAL
		-DCONFIG_BT_BROADCASTER
	)
else()
	sdk_add_compile_definitions_ifdef(CONFIG_BT_CENTRAL -DCONFIG_BT_CENTRAL)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_OBSERVER -DCONFIG_BT_OBSERVER)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_PERIPHERAL -DCONFIG_BT_PERIPHERAL)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_BROADCASTER -DCONFIG_BT_BROADCASTER)
endif()
# 
# ifneq ($(CONFIG_DBG_RUN_ON_FPGA), y)
# ifeq ($(CONFIG_BT_SETTINGS), y)
# CFLAGS += -DCONFIG_BT_SETTINGS
# endif
# endif
if(NOT CONFIG_DBG_RUN_ON_FPGA)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_SETTINGS -DCONFIG_BT_SETTINGS)
endif()
# 
# ifeq ($(CONFIG_BLE_MFG),1)
# CFLAGS += -DCONFIG_BLE_MFG
# ifeq ($(CONFIG_BLE_MFG_HCI_CMD),1)
# CFLAGS   += -DCONFIG_BLE_MFG_HCI_CMD
# endif
# CONFIG_ADV_EXTENSION := 0
# CONFIG_CIS := 0
# CONFIG_BIS := 0
# CONFIG_LE_PWR_CTRL := 0
# ifeq ($(CONFIG_CHIP_NAME),BL602)
# else ifeq ($(CONFIG_CHIP_NAME),BL702)
# else
# CONFIG_BT_ALLROLES := 0
# CONFIG_BT_CENTRAL := 0
# CONFIG_BT_OBSERVER := 0
# CONFIG_BT_PERIPHERAL := 0
# CONFIG_BT_BROADCASTER := 0
# endif
# endif
if(CONFIG_BLE_MFG)
	sdk_add_compile_definitions(-DCONFIG_BLE_MFG)
	sdk_add_compile_definitions_ifdef(CONFIG_BLE_MFG_HCI_CMD -DCONFIG_BLE_MFG_HCI_CMD)
	set(CONFIG_ADV_EXTENSION n)
	set(CONFIG_CIS n)
	set(CONFIG_BIS n)
	set(CONFIG_LE_PWR_CTRL n)
	if("${CHIP}" STREQUAL "bl602")

	elseif(("${CHIP}" STREQUAL "bl702"))

	else()
		set(CONFIG_BT_ALLROLES n)
		set(CONFIG_BT_CENTRAL n)
		set(CONFIG_BT_OBSERVER n)
		set(CONFIG_BT_PERIPHERAL n)
		set(CONFIG_BT_BROADCASTER n)
	endif()
endif()
# 
# ifeq ($(CONFIG_BT_GEN_RANDOM_BY_SW),1)
# CFLAGS += -DCONFIG_BT_GEN_RANDOM_BY_SW
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_GEN_RANDOM_BY_SW -DCONFIG_BT_GEN_RANDOM_BY_SW)
# 
# ifeq ($(CONFIG_BLE_PDS),1)
# CFLAGS += -DCONFG_BLE_PDS
# CFLAGS += -DCONFIG_HW_SEC_ENG_DISABLE
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BLE_PDS -DCONFG_BLE_PDS -DCONFIG_HW_SEC_ENG_DISABLE)
# 
# ifeq ($(CONFIG_EM_HEAP_DISABLE),1)
# CFLAGS += -DCONFG_EM_HEAP_DISABLE
# endif
sdk_add_compile_definitions_ifdef(CONFIG_EM_HEAP_DISABLE -DCONFG_EM_HEAP_DISABLE)
# 
# ifneq ($(CONFIG_BT_CONN),0)
# CFLAGS   += 	-DCONFIG_BT_CONN
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_CONN -DCONFIG_BT_CONN)
# 
# CFLAGS   += -DCONFIG_BT_HCI_VS_EVT_USER \
#  			-DCONFIG_BT_ASSERT \
sdk_add_compile_definitions(-DCONFIG_BT_HCI_VS_EVT_USER -DCONFIG_BT_ASSERT)
# 
# ifneq ($(CONFIG_SIMPLE_MASTER),1)
# CFLAGS   +=		-DCONFIG_BT_GATT_DIS_PNP \
#  			-DCONFIG_BT_GATT_DIS_SERIAL_NUMBER \
#  			-DCONFIG_BT_GATT_DIS_FW_REV \
#  			-DCONFIG_BT_GATT_DIS_HW_REV \
#  			-DCONFIG_BT_GATT_DIS_SW_REV \
#  			-DCONFIG_BT_GATT_DYNAMIC_DB \
#  			-DCONFIG_BT_GATT_SERVICE_CHANGED \
#  			-DCONFIG_BT_KEYS_OVERWRITE_OLDEST \
#  			-DCONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING \
#  			-DCONFIG_BT_BONDABLE 
# endif
if(NOT CONFIG_SIMPLE_MASTER)
	sdk_add_compile_definitions(
		-DCONFIG_BT_GATT_DIS_PNP
		-DCONFIG_BT_GATT_DIS_SERIAL_NUMBER
		-DCONFIG_BT_GATT_DIS_FW_REV
		-DCONFIG_BT_GATT_DIS_HW_REV
		-DCONFIG_BT_GATT_DIS_SW_REV
		-DCONFIG_BT_GATT_DYNAMIC_DB
		-DCONFIG_BT_GATT_SERVICE_CHANGED
		-DCONFIG_BT_KEYS_OVERWRITE_OLDEST
		-DCONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING
		-DCONFIG_BT_BONDABLE
	)
endif()
# 
# ifeq ($(CONFIG_BT_GAP_PERIPHERAL_PREF_PARAMS),1)
# CFLAGS += -DCONFIG_BT_GAP_PERIPHERAL_PREF_PARAMS
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_GAP_PERIPHERAL_PREF_PARAMS -DCONFIG_BT_GAP_PERIPHERAL_PREF_PARAMS)
# 
# ifeq ($(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL),1)
# CFLAGS += -DCONFIG_BT_L2CAP_DYNAMIC_CHANNEL
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL -DCONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
# 
# ifeq ($(CONFIG_BT_GATT_CLIENT),1)
# CFLAGS += -DCONFIG_BT_GATT_CLIENT
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_GATT_CLIENT -DCONFIG_BT_GATT_CLIENT)
# 
# ifeq ($(CONFIG_BT_DATA_LEN_UPDATE),1)
# CFLAGS += -DCONFIG_BT_DATA_LEN_UPDATE=1
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_DATA_LEN_UPDATE -DCONFIG_BT_DATA_LEN_UPDATE)
# 
# ifeq ($(CONFIG_BT_RESET),1)
# CFLAGS   += -DCONFG_BT_RESET
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_RESET -DCONFG_BT_RESET)
# 
# ifneq ($(CONFIG_DISABLE_BT_SMP), y)
# CFLAGS += -DCONFIG_BT_SMP \
#  			-DCONFIG_BT_SIGNING
# ifeq ($(CONFIG_BT_FIXED_PASSKEY),1)
# CFLAGS += -DCONFIG_BT_FIXED_PASSKEY
# endif
# ifeq ($(CONFIG_BT_SMP_ENFORCE_MITM),1)
# CFLAGS += -DCONFIG_BT_SMP_ENFORCE_MITM
# endif
# endif
if(NOT CONFIG_DISABLE_BT_SMP)
	sdk_add_compile_definitions(-DCONFIG_BT_SMP -DCONFIG_BT_SIGNING)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_FIXED_PASSKEY -DCONFIG_BT_FIXED_PASSKEY)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_SMP_ENFORCE_MITM -DCONFIG_BT_SMP_ENFORCE_MITM)
endif()
# 
# ifeq ($(CONFIG_BT_REMOTE_VERSION), y)
# CFLAGS += -DCONFIG_BT_REMOTE_VERSION=1
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_REMOTE_VERSION -DCONFIG_BT_REMOTE_VERSION=1)
# 
# ifneq ($(CONFIG_DISABLE_BT_ECC), y)
# CFLAGS += -DCONFIG_BT_ECC
# endif
if(NOT CONFIG_DISABLE_BT_ECC)
	sdk_add_compile_definitions(-DCONFIG_BT_ECC)
endif()
# 
# ifneq ($(CONFIG_DBG_RUN_ON_FPGA), y)
# CFLAGS += -DCONFIG_BT_SETTINGS_CCC_LAZY_LOADING \
#  			-DCONFIG_BT_SETTINGS_USE_PRINTK
# endif
if(NOT CONFIG_DBG_RUN_ON_FPGA)
	sdk_add_compile_definitions(-DCONFIG_BT_SETTINGS_CCC_LAZY_LOADING -DCONFIG_BT_SETTINGS_USE_PRINTK)
endif()
# 
# ifeq ($(CONFIG_BLE_STACK_DBG_PRINT),1)
# CFLAGS += -DCONFG_BLE_STACK_DBG_PRINT
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BLE_STACK_DBG_PRINT -DCONFG_BLE_STACK_DBG_PRINT)
# 
# ifeq ($(CONFIG_BT_DEBUG_MONITOR),1)
# CFLAGS += -DCONFIG_BT_DEBUG_MONITOR
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_DEBUG_MONITOR -DCONFIG_BT_DEBUG_MONITOR)
# ifeq ($(CONFIG_BLE_AT_CMD),1)
# CFLAGS += -DCONFIG_BLE_AT_CMD
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BLE_AT_CMD -DCONFIG_BLE_AT_CMD)
# 
#ifeq ($(CONFIG_BT_OAD_SERVER),1)
#CFLAGS += -DCONFIG_BT_OAD_SERVER
#endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_OAD_SERVER -DCONFIG_BT_OAD_SERVER)
# ifeq ($(CONFIG_BT_OAD_CLIENT),1)
# CFLAGS += -DCONFIG_BT_OAD_CLIENT
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_OAD_CLIENT -DCONFIG_BT_OAD_CLIENT)
# ifeq ($(CONFIG_HOGP_SERVER),1)
# CFLAGS += -DCONFIG_HOGP_SERVER
# endif
sdk_add_compile_definitions_ifdef(CONFIG_HOGP_SERVER -DCONFIG_HOGP_SERVER)
# ifeq ($(CONFIG_BT_BAS_SERVER),1)
# CFLAGS += -DCONFIG_BT_BAS_SERVER
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_BAS_SERVER -DCONFIG_BT_BAS_SERVER)
# ifeq ($(CONFIG_BT_IAS_SERVER),1)
# CFLAGS += -DCONFIG_BT_IAS_SERVER
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_IAS_SERVER -DCONFIG_BT_IAS_SERVER)
# ifeq ($(CONFIG_BT_SPP_SERVER),1)
# CFLAGS += -DCONFIG_BT_SPP_SERVER
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_SPP_SERVER -DCONFIG_BT_SPP_SERVER)
# ifeq ($(CONFIG_BT_SCPS_SERVER),1)
# CFLAGS += -DCONFIG_BT_SCPS_SERVER
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_SCPS_SERVER -DCONFIG_BT_SCPS_SERVER)
# ifeq ($(CONFIG_BT_DIS_SERVER),1)
# CFLAGS += -DCONFIG_BT_DIS_SERVER
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_DIS_SERVER -DCONFIG_BT_DIS_SERVER)
# 
sdk_add_compile_definitions_ifdef(CONFIG_BT_REMOTE_CONTROL -DCONFIG_BT_REMOTE_CONTROL)
# 
# ifneq ($(CONFIG_DISABLE_BT_HOST_PRIVACY), y)
# CFLAGS += -DCONFIG_BT_PRIVACY
# endif
if(NOT CONFIG_DISABLE_BT_HOST_PRIVACY)
	sdk_add_compile_definitions(-DCONFIG_BT_PRIVACY)
endif() 
# 
# ifeq ($(CONFIG_BLE_TP_TEST),1)
# CFLAGS += -DCONFIG_BLE_TP_TEST
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BLE_TP_TEST -DCONFIG_BLE_TP_TEST)
# 
# ifeq ($(CONFIG_BLE_TP_SERVER),1)
# CFLAGS += -DCONFIG_BLE_TP_SERVER \
#           -DCONFIG_BT_GATT_DYNAMIC_DB
# ifeq ($(CONFIG_BLE_TP_SVC_COMPATIBILITY_TEST),1)
# CFLAGS += -DCONFIG_BLE_TP_SVC_COMPATIBILITY_TEST
# endif
# endif
if(CONFIG_BLE_TP_SERVER)
	sdk_add_compile_definitions(-DCONFIG_BLE_TP_SERVER)
	sdk_add_compile_definitions(-DCONFIG_BT_GATT_DYNAMIC_DB)
	sdk_add_compile_definitions_ifdef(CONFIG_BLE_TP_SVC_COMPATIBILITY_TEST -DCONFIG_BLE_TP_SVC_COMPATIBILITY_TEST)
endif()
# 
# ifeq ($(CONFIG_BLE_MULTI_ADV),1)
# CFLAGS += -DCONFIG_BLE_MULTI_ADV
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BLE_MULTI_ADV -DCONFIG_BLE_MULTI_ADV)
# 
# ifeq ($(CONFIG_BLE_RECONNECT_TEST),1)
# CFLAGS += -DCONFIG_BLE_RECONNECT_TEST
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BLE_RECONNECT_TEST -DCONFIG_BLE_RECONNECT_TEST)
# 
# ifeq ($(CONFIG_BT_STACK_CLI),1)
# CFLAGS += -DCONFIG_BT_STACK_CLI
# endif
# ifeq ($(CONFIG_BT_TP_CLI),1)
# CFLAGS += -DCONFIG_BT_TP_CLI
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_STACK_CLI -DCONFIG_BT_STACK_CLI)
sdk_add_compile_definitions_ifdef(CONFIG_BT_TP_CLI -DCONFIG_BT_TP_CLI)
# 
# ifeq ($(CONFIG_BT_STACK_PTS),1)
# CFLAGS += -DCONFIG_BT_STACK_PTS
# endif
sdk_add_compile_definitions_ifdef(CONFIG_BT_STACK_PTS -DCONFIG_BT_STACK_PTS)
# 
# ifeq ($(PTS_TEST_CASE_INSUFFICIENT_KEY),1)
# CFLAGS += -DPTS_TEST_CASE_INSUFFICIENT_KEY
# endif
sdk_add_compile_definitions_ifdef(PTS_TEST_CASE_INSUFFICIENT_KEY -DPTS_TEST_CASE_INSUFFICIENT_KEY)
# ifeq ($(PTS_GAP_SLAVER_CONFIG_INDICATE_CHARC),1)
# CFLAGS += -DPTS_GAP_SLAVER_CONFIG_INDICATE_CHARC
# endif
sdk_add_compile_definitions_ifdef(PTS_GAP_SLAVER_CONFIG_INDICATE_CHARC -DPTS_GAP_SLAVER_CONFIG_INDICATE_CHARC)
# 
# ifeq ($(CONFIG_ZIGBEE_PROV),1)
# CFLAGS += -DCONFIG_ZIGBEE_PROV
# endif
sdk_add_compile_definitions_ifdef(CONFIG_ZIGBEE_PROV -DCONFIG_ZIGBEE_PROV)
# 
# ifeq ($(CONFIG_AUTO_PTS),1)
# CFLAGS += -DCONFIG_AUTO_PTS
# endif
sdk_add_compile_definitions_ifdef(CONFIG_AUTO_PTS -DCONFIG_AUTO_PTS)

#ifeq ($(CONFIG_DYNAMIC_GATTS),1)
#CFLAGS += -DCONFIG_DYNAMIC_GATTS
#endif
sdk_add_compile_definitions_ifdef(CONFIG_DYNAMIC_GATTS -DCONFIG_DYNAMIC_GATTS)
# 
# ##########################################
# ############## BLE MESH ##################
# ##########################################
# 
# ifeq ($(CONFIG_BT_MESH),1)
#
# ifeq ($(CONFIG_BLE_MESH_CERT_BASED_PROV),1)
# CFLAGS += -DCONFIG_BLE_MESH_CERT_BASED_PROV=1
# endif
# ifeq ($(CONFIG_BT_MESH_V1d1),1)
# CFLAGS += -DCONFIG_BT_MESH_V1d1
# CFLAGS += -DCONFIG_BT_MESH_ECDH_P256_HMAC_SHA256_AES_CCM
# CFLAGS += -DCONFIG_BT_MESH_ECDH_P256_CMAC_AES128_AES_CCM
# CFLAGS += -DCONFIG_BT_MESH_PRIV_BEACONS
# CFLAGS += -DCONFIG_BT_MESH_PRIV_BEACON_CLI
# #CFLAGS += -DCONFIG_BT_MESH_OOB_AUTH_REQUIRED
# endif
# ifeq ($(CONFIG_AUTO_PTS),1)
# CFLAGS += -DCONFIG_BT_MESH_IV_UPDATE_TEST
# CONFIG_BT_MESH_CLI := 0
# else ifeq ($(CONFIG_BT_MESH_PTS),1)
# CFLAGS += -DCONFIG_BT_MESH_IV_UPDATE_TEST
# endif
# ifeq ($(CONFIG_BT_MESH_CLI),1)
# CFLAGS += -DCONFIG_BT_MESH_CLI
# endif
# ifeq ($(CONFIG_BT_MESH_PTS),1)
# CFLAGS += -DCONFIG_BT_MESH_PTS
# endif
# CFLAGS += -DCONFIG_BT_MESH 
# ifeq ($(CONFIG_CHIP_NAME),BL602)
# CFLAGS += -DBFLB_CRYPT_HARDWARE
# else ifeq ($(CONFIG_CHIP_NAME),BL702)
# CFLAGS += -DBFLB_CRYPT_HARDWARE
# endif
# 
# CFLAGS += -DCONFIG_BT_MESH_PROV
# ifeq ($(CONFIG_BT_MESH_RELAY),1)
# CFLAGS += -DCONFIG_BT_MESH_RELAY
# endif
# #CFLAGS += -DCONFIG_BT_SETTINGS
# ifeq ($(CONFIG_BT_MESH_PB_ADV),1)
# CFLAGS += -DCONFIG_BT_MESH_PB_ADV
# endif
# ifeq ($(CONFIG_BT_MESH_PB_GATT),1)
# CFLAGS += -DCONFIG_BT_MESH_PB_GATT
# endif
# ifeq ($(CONFIG_BT_MESH_FRIEND),1)
# CFLAGS += -DCONFIG_BT_MESH_FRIEND
# endif
# ifeq ($(CONFIG_BT_MESH_LOW_POWER),1)
# CFLAGS += -DCONFIG_BT_MESH_LOW_POWER
# endif
# ifeq ($(CONFIG_BT_MESH_PROXY),1)
# CFLAGS += -DCONFIG_BT_MESH_PROXY
# endif
# ifeq ($(CONFIG_BT_MESH_GATT_PROXY),1)
# CFLAGS += -DCONFIG_BT_MESH_GATT_PROXY
# endif
# ifeq ($(CONFIG_BT_MESH_MOD_BIND_CB),1)
# CFLAGS += -DCONFIG_BT_MESH_MOD_BIND_CB
# endif
# ifeq ($(CONFIG_BT_MESH_APPKEY_ADD_CB),1)
# CFLAGS += -DCONFIG_BT_MESH_APPKEY_ADD_CB
# endif
# ifeq ($(CONFIG_BT_MESH_MOD_SUB_ADD_CB),1)
# CFLAGS += -DCONFIG_BT_MESH_MOD_SUB_ADD_CB
# endif
# ifeq ($(CONFIG_BLE_STACK_DBG_PRINT),1)
# CFLAGS += -DCONFG_BLE_STACK_DBG_PRINT
# endif
# ifeq ($(CONFIG_BT_MESH_SYNC),1)
# CFLAGS += -DCONFIG_BT_MESH_SYNC
# endif
# ifeq ($(CONFIG_BT_MESH_NODE_SEND_CFGCLI_MSG),1)
# CFLAGS += -DCONFIG_BT_MESH_NODE_SEND_CFGCLI_MSG
# endif
# ifeq ($(CONFIG_BT_MESH_CDB),1)
# CFLAGS += -DCONFIG_BT_MESH_CDB
# ifeq ($(CONFIG_AUTO_PTS),1)
# CFLAGS += -DCONFIG_BT_MESH_CDB_NODE_COUNT=4
# else
# CFLAGS += -DCONFIG_BT_MESH_CDB_NODE_COUNT=64
# endif
# CFLAGS += -DCONFIG_BT_MESH_CDB_SUBNET_COUNT=2
# CFLAGS += -DCONFIG_BT_MESH_CDB_APP_KEY_COUNT=2
# endif 
# ifeq ($(CONFIG_BT_MESH_PROVISIONER),1)
# CFLAGS += -DCONFIG_BT_MESH_PROVISIONER
# CFLAGS += -DCONFIG_BT_MESH_CONFG_CLI
# CFLAGS += -DCONFIG_BT_MESH_HEALTH_CLI
# endif
# ifeq ($(CONFIG_BT_MESH_OTA_TARGET),1)
# CFLAGS += -DCONFIG_BT_MESH_OTA_TARGET
# endif
# ifeq ($(CONFIG_BT_MESH_MODEL),1)
# CFLAGS += -DCONFIG_BT_MESH_MODEL
# CFLAGS += -DCONFIG_BT_MESH_TEST
# ifeq ($(CONFIG_BT_MESH_MODEL_GEN_SRV),1)
# CFLAGS += -DCONFIG_BT_MESH_MODEL_GEN_SRV
# endif 
# ifeq ($(CONFIG_BT_MESH_MODEL_GEN_CLI),1)
# CFLAGS += -DCONFIG_BT_MESH_MODEL_GEN_CLI
# endif 
# ifeq ($(CONFIG_BT_MESH_MODEL_LIGHT_SRV),1)
# CFLAGS += -DCONFIG_BT_MESH_MODEL_LIGHT_SRV
# endif 
# ifeq ($(CONFIG_BT_MESH_MODEL_LIGHT_CLI),1)
# CFLAGS += -DCONFIG_BT_MESH_MODEL_LIGHT_CLI
# endif
# ifeq ($(CONFIG_BT_MESH_MODEL_VENDOR_CLI),1)
# CFLAGS += -DCONFIG_BT_MESH_MODEL_VENDOR_CLI
# endif
# else
# ifeq ($(CONFIG_BT_MESH_MODEL_GEN_SRV),1)
# CFLAGS += -DCONFIG_BT_MESH_MODEL_GEN_SRV
# endif 
# endif
# endif
if(CONFIG_BT_MESH)
    sdk_add_compile_definitions_ifdef(CONFIG_BLE_MESH_CERT_BASED_PROV -DCONFIG_BLE_MESH_CERT_BASED_PROV=1)
    sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_V1d1
		-DCONFIG_BT_MESH_V1d1
		-DCONFIG_BT_MESH_ECDH_P256_HMAC_SHA256_AES_CCM
		-DCONFIG_BT_MESH_ECDH_P256_CMAC_AES128_AES_CCM
		-DCONFIG_BT_MESH_PRIV_BEACONS
		-DCONFIG_BT_MESH_PRIV_BEACON_CLI
	)

	if(CONFIG_BT_MESH_PTS OR CONFIG_AUTO_PTS)
		sdk_add_compile_definitions(-DCONFIG_BT_MESH_IV_UPDATE_TEST)
	endif()
	if(CONFIG_AUTO_PTS)
		set(CONFIG_BT_MESH_CLI n)
	endif()
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_CLI -DCONFIG_BT_MESH_CLI)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_PTS -DCONFIG_BT_MESH_PTS)
	sdk_add_compile_definitions(-DCONFIG_BT_MESH)
	if("${CHIP}" STREQUAL "bl602")
		sdk_add_compile_definitions(-DBFLB_CRYPT_HARDWARE)
	elseif("${CHIP}" STREQUAL "bl702")
		sdk_add_compile_definitions(-DBFLB_CRYPT_HARDWARE)
	endif()
	sdk_add_compile_definitions(-DCONFIG_BT_MESH_PROV)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_RELAY -DCONFIG_BT_MESH_RELAY)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_PB_ADV -DCONFIG_BT_MESH_PB_ADV)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_PB_GATT -DCONFIG_BT_MESH_PB_GATT)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_FRIEND -DCONFIG_BT_MESH_FRIEND)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_LOW_POWER -DCONFIG_BT_MESH_LOW_POWER)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_PROXY -DCONFIG_BT_MESH_PROXY)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_GATT_PROXY -DCONFIG_BT_MESH_GATT_PROXY)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MOD_BIND_CB -DCONFIG_BT_MESH_MOD_BIND_CB)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_APPKEY_ADD_CB -DCONFIG_BT_MESH_APPKEY_ADD_CB)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MOD_SUB_ADD_CB -DCONFIG_BT_MESH_MOD_SUB_ADD_CB)
	sdk_add_compile_definitions_ifdef(CONFIG_BLE_STACK_DBG_PRINT -DCONFG_BLE_STACK_DBG_PRINT)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_SYNC -DCONFIG_BT_MESH_SYNC)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_NODE_SEND_CFGCLI_MSG -DCONFIG_BT_MESH_NODE_SEND_CFGCLI_MSG)
    if(CONFIG_BT_MESH_CDB)
        if(CONFIG_AUTO_PTS)
            sdk_add_compile_definitions(-DCONFIG_BT_MESH_CDB_NODE_COUNT=4)
        else()
            sdk_add_compile_definitions(-DCONFIG_BT_MESH_CDB_NODE_COUNT=64)
        endif()
    endif()
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_CDB 
	#	-DCONFIG_BT_MESH_CDB
		-DCONFIG_BT_MESH_CDB_SUBNET_COUNT=2
		-DCONFIG_BT_MESH_CDB_APP_KEY_COUNT=2
	)
	sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_PROVISIONER 
	#	-DCONFIG_BT_MESH_PROVISIONER
		-DCONFIG_BT_MESH_CONFG_CLI
		-DCONFIG_BT_MESH_HEALTH_CLI
	)
    sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_OTA_TARGET -DCONFIG_BT_MESH_OTA_TARGET)
    if(CONFIG_BT_MESH_MODEL)
		sdk_add_compile_definitions(-DCONFIG_BT_MESH_MODEL -DCONFIG_BT_MESH_TEST)
		sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MODEL_GEN_SRV -DCONFIG_BT_MESH_MODEL_GEN_SRV)
		sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MODEL_GEN_CLI -DCONFIG_BT_MESH_MODEL_GEN_CLI)
		sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MODEL_LIGHT_SRV -DCONFIG_BT_MESH_MODEL_LIGHT_SRV)
		sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MODEL_LIGHT_CLI -DCONFIG_BT_MESH_MODEL_LIGHT_CLI)
		sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MODEL_VENDOR_CLI -DCONFIG_BT_MESH_MODEL_VENDOR_CLI)
    else()
		sdk_add_compile_definitions_ifdef(CONFIG_BT_MESH_MODEL_GEN_SRV -DCONFIG_BT_MESH_MODEL_GEN_SRV)
    endif()
endif()
# 
# ifeq ($(CONFIG_USE_XTAL32K),1)
# CFLAGS += -DCONFG_USE_XTAL32K
# endif
sdk_add_compile_definitions_ifdef(CONFIG_USE_XTAL32K -DCONFG_USE_XTAL32K)
# 
# #CFLAGS   += -Wno-unused-const-variable  \
# #CFLAGS   += -Wno-unused-but-set-variable \
# #CFLAGS   += -Wno-format
# 
# BTBLE_PATH := $(abspath $(dir $(COMPONENT_PATH)))
# ifeq ($(notdir $(BTBLE_PATH)),ble)
# BTBLE_SDK_VER := $(shell cd $(BTBLE_PATH) && git --git-dir=.git describe --abbrev=8 --tags --dirty --always)
# CFLAGS += -DBTBLE_SDK_VER=\"$(BTBLE_SDK_VER)\"
# endif
execute_process(COMMAND git --git-dir=.git describe --abbrev=8 --tags --dirty --always
                RESULT_VARIABLE USING_GIT
                OUTPUT_VARIABLE version
                OUTPUT_STRIP_TRAILING_WHITESPACE
                ERROR_QUIET)
if(NOT ${USING_GIT} EQUAL n)
  sdk_add_compile_definitions(-DBTBLE_SDK_VER="NULL")
else()
  sdk_add_compile_definitions(-DBTBLE_SDK_VER="${version}")
endif()
# 
